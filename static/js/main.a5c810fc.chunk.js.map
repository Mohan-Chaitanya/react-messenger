{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","App","Signin","className","onClick","provider","GoogleAuthProvider","signInWithPopup","Signout","currentUser","signOut","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","fromValue","setFromValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","map","msg","ChatMessage","textMessage","id","onSubmit","value","onChange","target","type","props","messageClass","src","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMC,EAAOR,IAASQ,OAChBC,EAAYT,IAASS,YAyFZC,MArFf,WAEE,IAAMC,EAAS,WAMb,OACE,gCACE,oDACA,wBAAQC,UAAU,UAAUC,QAPX,WACnB,IAAMC,EAAW,IAAId,IAASQ,KAAKO,mBACnCP,EAAKQ,gBAAgBF,IAKnB,SAAmD,cAAC,IAAD,UAKnDG,EAAU,WAEd,OAAOT,EAAKU,aACV,wBAAQN,UAAU,WAAWC,QAAS,kBAAML,EAAKW,WAAjD,sBAIEC,EAAW,WACf,IAAMC,EAAcZ,EAAUa,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IACrD,EAAmBC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAAP,oBACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ3B,EAAKU,YAAvBkB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAWxC,IAASS,UAAUgC,WAAWC,kBACzCN,MACAC,aATgB,OAWlBN,EAAa,IAXK,2CAAH,sDAcjB,OACE,mCACE,gCAEGH,GAAYA,EAASe,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,YAAaF,GAArBA,EAAIG,OAEvD,uBAAMC,SAAUhB,EAAhB,UACE,uBAAOiB,MAAOnB,EAAWoB,SAAU,SAACjB,GAAD,OAAOF,EAAaE,EAAEkB,OAAOF,UAChE,wBAAQG,KAAK,SAAb,2BAOJP,EAAc,SAACQ,GACnB,MAAgCA,EAAMP,YAA9BV,EAAR,EAAQA,IAAKG,EAAb,EAAaA,KAAMF,EAAnB,EAAmBA,SAEbiB,EAAelB,IAAQ5B,EAAKU,YAAYkB,IAAM,OAAS,WAE7D,OACE,sBAAKxB,UAAS,iBAAY0C,GAA1B,UACE,qBAAKC,IAAKlB,IACV,4BAAIE,QAKV,EAAeiB,YAAahD,GAArBiD,EAAP,oBAEA,OACE,sBAAK7C,UAAU,MAAf,UACE,iCACE,cAACK,EAAD,MAEF,kCACGwC,EAAO,cAACrC,EAAD,IAAe,cAACT,EAAD,UC3FhB+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a5c810fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport GoogleButton from 'react-google-button'\n\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBWh_mdoSuwzsw7o_fnq8d0dgr2Q5qYctY\",\n  authDomain: \"chat-app-42ee7.firebaseapp.com\",\n  projectId: \"chat-app-42ee7\",\n  storageBucket: \"chat-app-42ee7.appspot.com\",\n  messagingSenderId: \"891274908278\",\n  appId: \"1:891274908278:web:3eef64b0fcfc8d30b18557\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\n\nfunction App() {\n\n  const Signin = () => {\n\n    const googleSignIn = () => {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      auth.signInWithPopup(provider);\n    }\n    return (\n      <div>\n        <h3>FireChat-Messenger</h3>\n        <button className='sign-in' onClick={googleSignIn}><GoogleButton /></button>\n      </div>\n    )\n  }\n\n  const Signout = () => {\n\n    return auth.currentUser && (\n      <button className='sign-out' onClick={() => auth.signOut()}>Signout</button>\n    )\n  }\n\n  const ChatRoom = () => {\n    const messagesRef = firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt').limit(30);\n    const [messages] = useCollectionData(query, { idField: 'id' })\n    const [fromValue, setFromValue] = useState('')\n\n    const sendMessage = async (e) => {\n      e.preventDefault();\n\n      const { uid, photoURL } = auth.currentUser;\n\n      await messagesRef.add({\n        text: fromValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL\n      })\n      setFromValue('');\n    }\n\n    return (\n      <>\n        <div>\n\n          {messages && messages.map(msg => <ChatMessage key={msg.id} textMessage={msg} />)}\n\n          <form onSubmit={sendMessage}>\n            <input value={fromValue} onChange={(e) => setFromValue(e.target.value)} />\n            <button type='submit'>Send</button>\n          </form>\n        </div>\n      </>\n    )\n  }\n\n  const ChatMessage = (props) => {\n    const { uid, text, photoURL } = props.textMessage;\n\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (\n      <div className={`message${messageClass}`}>\n        <img src={photoURL} />\n        <p>{text}</p>\n      </div>\n    )\n  }\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Signout />\n      </header>\n      <section>\n        {user ? <ChatRoom /> : <Signin />}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}